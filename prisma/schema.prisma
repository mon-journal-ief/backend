generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  email         String  @unique
  password      String
  name          String
  children      Child[]
  emailVerified Boolean @default(false)

  // Subscription fields
  plan               Plan               @default(STANDARD)
  subscriptionStatus SubscriptionStatus @default(TRIAL)
  trialEndsAt        DateTime?
  subscriptionEndsAt DateTime?

  // Tokens
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  refreshToken             String?
  refreshTokenExpiresAt    DateTime?
  resetToken               String?
  resetTokenExpiresAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
}

enum Grade {
  Maternelle
  CP
  CE1
  CE2
  CM1
  CM2
  Sixième
  Cinquième
  Quatrième
  Troisième
  Seconde
  Première
  Terminale
}

enum Plan {
  STANDARD
  SOLIDARITY
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  EXPIRED
  CANCELLED
}

model ProgramTemplate {
  id          String           @id @default(uuid())
  name        String
  description String
  grade       Grade
  sources     Json? // Array of sources with name and url
  cycle       Int
  elements    ProgramElement[]
  programs    Program[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Program {
  id          String           @id @default(uuid())
  name        String
  description String?
  grade       Grade?
  elements    ProgramElement[]
  children    Child[]

  template   ProgramTemplate? @relation(fields: [templateId], references: [id])
  templateId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProgramElement {
  id          String   @id @default(uuid())
  name        String
  description String
  exercices   String[] @default([])
  isValidated Boolean  @default(false)

  program   Program? @relation(fields: [programId], references: [id])
  programId String?

  template          ProgramTemplate? @relation(fields: [programTemplateId], references: [id])
  programTemplateId String?

  journalEntries JournalEntry[] @relation("ValidatedElements")

  parent   ProgramElement?  @relation("ProgramElementToChildren", fields: [parentId], references: [id])
  children ProgramElement[] @relation("ProgramElementToChildren")
  parentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Child {
  id             String         @id @default(uuid())
  name           String
  lastName       String?
  profileImage   String?
  birthdate      DateTime?
  gender         Gender?
  journalEntries JournalEntry[]

  program   Program? @relation(fields: [programId], references: [id])
  programId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model JournalEntry {
  id                String           @id @default(uuid())
  date              DateTime
  comment           String
  images            String[]
  validatedElements ProgramElement[] @relation("ValidatedElements")

  child   Child  @relation(fields: [childId], references: [id])
  childId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
